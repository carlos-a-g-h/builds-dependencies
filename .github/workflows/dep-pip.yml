name: PIP packages

on:
  workflow_dispatch:
    inputs:
      THE_URL:
        description: Direct link to a requirements.txt file
        required: true
        type: string

      THE_NAME:
        description: Short name for this bundle of packages
        required: true
        type: string

      THE_RUNNER:
        description: The Github runner to use
        required: true
        type: choice
        options:
        - ubuntu-20.04
        - ubuntu-22.04
        - ubuntu-latest
        - windows-2019
        - windows-2022
        - windows-latest

      THE_PYTHON:
        description: Python version to use (3.10, 3.9.6, etc...)
        required: true
        type: string
        default: "3.9.6"

env:
  PIPKIT_SCR: "https://gist.github.com/carlos-a-g-h/c294236df4d769216a0f1af434666364/raw/9506653948ead4aacbe6c249c982537d18f807a2/pipkit.py"

jobs:

#  job0:
#    name: Some data
#    runs-on: ubuntu-latest
#    outputs:
#      the_date: ${{ steps.DateToday.outputs.TODAY }}
#      the_filename: ${{ steps.Filename.outputs.FILENAME }}
#
#    steps:
#      - name: Get date and time
#        id: DateToday
#        run: |
#          RIGHT_NOW=$(date +%Y-%m-%d-%H-%M-%S)
#          echo "Today is: $RIGHT_NOW"
#          echo "TODAY=$RIGHT_NOW >> $GITHUB_OUTPUT"
#          cat "$GITHUB_OUTPUT"|tail -n1
#
#      - name: Get filename
#        id: Filename
#        run: |
#          if [[ "${{ inputs.THE_RUNNER }}" == "windows-"* ]]
#          then
#            echo "echo FILENAME=${{ inputs.THE_NAME }}-${{ inputs.THE_RUNNER }}.zip" >> $GITHUB_OUTPUT
#          else
#            echo "echo FILENAME=${{ inputs.THE_NAME }}-${{ inputs.THE_RUNNER }}.tar" >> $GITHUB_OUTPUT
#          fi
#          cat "$GITHUB_OUTPUT"|tail -n1

  job1:

    # needs: job0

    name: The Job
    runs-on: "${{ inputs.THE_RUNNER }}"

    steps:

    - name: Setup Python
      uses: actions/setup-python@v3
      with:
        python-version: "${{ inputs.THE_PYTHON}}"

    - name: Download some things first (Linux)
      if: runner.os == 'Linux'
      run: |
        wget "${{ inputs.THE_URL }}" -O requirements.txt
        wget "${{ env.PIPKIT_SCR }}" -O pipkit.py

    - name: Download some things first (Windows)
      if: runner.os == 'Windows'
      run: |
        Invoke-WebRequest "${{ inputs.THE_URL }}" -OutFile requirements.txt
        Invoke-WebRequest "${{ env.PIPKIT_SCR }}" -OutFile pipkit.py

    - name: Install, relist, and download
      run: |
        # mkdir "${{ inputs.THE_NAME }}"
        # pip download -r "requirements.txt" --no-binary :all: -d "${{ inputs.THE_NAME }}"
        pip install -r "requirements.txt"
        python3 pipkit.py list "${{ inputs.THE_NAME }}/000-requirements.txt"
        python3 pipkit.py download "${{ inputs.THE_NAME }}/000-requirements.txt" "${{ inputs.THE_NAME }}"

    - name: Pack it up (Linux)
      if: runner.os == 'Linux'
      run: |
        ls "${{ inputs.THE_NAME }}"
        # tar -cfv "${{ inputs.THE_NAME }}.tar" "${{ inputs.THE_NAME }}"
        zip -0 -r "${{ inputs.THE_NAME }}.zip" "${{ inputs.THE_NAME }}"
        ls

    - name: Pack it up (Windows)
      if: runner.os == 'Windows'
      run: |
        dir "${{ inputs.THE_NAME }}"
        Compress-Archive -LiteralPath "${{ inputs.THE_NAME }}" -DestinationPath "${{ inputs.THE_NAME }}.zip" -CompressionLevel NoCompression
        dir

    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      with:
        # tag_name: ${{ needs.job0.the_date }}
        # release_name: ${{ needs.job0.the_date }}
        tag_name: "${{ inputs.THE_NAME }}"
        release_name: "${{ inputs.THE_NAME }}"
        draft: false
        prerelease: false

    - name: Attach the artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        # asset_path: "${{ needs.job0.the_filename }}"
        # asset_name: "${{ needs.job0.the_filename }}"
        asset_path: "${{ inputs.THE_NAME }}.zip"
        asset_name: "${{ inputs.THE_NAME }}.zip"
        asset_content_type: application/octet-stream
